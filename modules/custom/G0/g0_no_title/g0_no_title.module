<?php

use \Drupal\Core\Form\FormStateInterface;

/**
 * Implementation of hook_form_alter()
 */
function g0_no_title_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Read the configuration.
  $config = \Drupal::config('g0_no_title.settings');
  $types = $config->get('type');

  if(!is_array($types)) {
    return;
  }
  
  $tc_id = str_replace('node_', '', $form_id);
  $tc_id = str_replace('_form', '', $tc_id); // create
  $tc_id = str_replace('_edit', '', $tc_id); // Edit form
  
  // Check if the content type is in the list of types.
  if (array_key_exists($tc_id, $types)) {
    // Check if the content type is enabled.
    if ($types[$tc_id]) {
      // Hide title.
      $form['title']['#access'] = FALSE;
    }
  }
}

/**
 * Alter forms for inline entity form.
 */
function g0_no_title_inline_entity_form_entity_form_alter(&$form, FormStateInterface $form_state) {

  $form_id = $form['#bundle'];
  if($form['#op'] == 'edit'){
    $form_id .= '_edit';
  }
  $form_id = 'node_' . $form_id . '_form';

  g0_no_title_form_alter($form, $form_state, $form_id);

}

/**
 * Implements hook_entity_presave().
 */
function g0_no_title_entity_presave(Drupal\Core\Entity\EntityInterface $entity) { 
  
  if ($entity->getEntityTypeId() == 'node') {    
    $content_type = $entity->bundle();
    // Read the configuration.
    $config = \Drupal::config('g0_no_title.settings');
    $types = $config->get('type');
    if(is_array($types) && array_key_exists($content_type, $types)) {
      // Set title to from expression.
      $entity->set('title', get_title($entity)); 
    }
  }
}

/**
 * Alter inline form table to generate title from expresion.
 */
function g0_no_title_inline_entity_form_table_fields_alter(&$fields, $context) {
  // Read the configuration.
  $config = \Drupal::config('g0_no_title.settings');
  $types = $config->get('type');
  $expressions = $config->get('expression');
  $content_type = $context['allowed_bundles'][0];
  
  if(is_array($types) && array_key_exists($content_type, $types)) {
    unset($fields['status']);
    unset($fields['label']);
    
    if ($context['entity_type'] == 'node') {
      $fields['title'] = [
        'type' => 'callback',
        'label' => t('Title'),
        'weight' => 100,
        'callback' => 'get_title',
      ];
    }
  }
}

/**
 * Get title from expression.
 */
function get_title(Drupal\Core\Entity\EntityInterface $entity) {

  if(!$entity) return '';

  // Get node from url loaded
  $node_parent = \Drupal::routeMatch()->getParameter('node');
  if($node_parent && $node_parent->id() == $entity->id()) {
    $node_parent = null;
  }

  $title = $entity->getTitle();

  $content_type = $entity->bundle();  
  // Read the configuration.
  $config = \Drupal::config('g0_no_title.settings');
  $types = $config->get('type');  
  if(!is_array($types)) {
    return $title;
  }
  
  $expressions = $config->get('expression');
  // Check if the content type is in the list of types.
  if (array_key_exists($content_type, $types)) {
    // Check if the content type is enabled.
    if ($types[$content_type]) {
      // Check if the expression is set.
      if (array_key_exists($content_type, $expressions)) {
        $expression = $expressions[$content_type];
        // find the fields in the expression and replace them with the values.
        $fields = array();
        preg_match_all('/{([^}]+)}/', $expression, $fields);
        $fields = $fields[1];
        foreach ($fields as $field) {
          $field_parts = explode(':', $field);
          $field_name = $field_parts[0];
          $field_value = $entity;
          // Iterate in field_parts to last - 1 element.
          for ($i = 0; $i < count($field_parts) - 1; $i++) {
            if(!$field_value) continue;
            $field_part = $field_parts[$i];
            if ($field_value->hasField($field_part)) {
              // Check if the field is a reference field.
              if ($field_value->get($field_part)->getFieldDefinition()->getType() == 'entity_reference') {
                $field_value = $field_value->get($field_part)->entity;
              }
            }
            if($node_parent && $field_name == 'node_parent') {
              $field_value = $node_parent;
            }
          }

          if(!$field_value){
            $field_value = '[VacÃ­o]';
          }
          else if($field_parts[count($field_parts) - 1] == 'title') {
            // If entity is a node, get the title.
            if ($field_value instanceof \Drupal\node\Entity\Node)
              $field_value = $field_value->getTitle();
            // If entity is a taxonomy term, get the name.
            elseif($field_value instanceof \Drupal\taxonomy\Entity\Term)
              $field_value = $field_value->getName();
            // If entity is a user, get the name.
            elseif($field_value instanceof \Drupal\user\Entity\User)
              $field_value = $field_value->name;
            // If entity is a file, get the name.
            elseif($field_value instanceof \Drupal\file\Entity\File)
              $field_value = $field_value->filename;
            // If entity is a image, get the name.
            elseif($field_value instanceof \Drupal\image\Entity\Image)
              $field_value = $field_value->filename;
            // If entity is a media, get the name.
            elseif($field_value instanceof \Drupal\media\Entity\Media)
              $field_value = $field_value->filename;
            else
              $field_value = $field_value->value;
          }
          else if( in_array($field_parts[count($field_parts) - 1], ['nid', 'vid', 'id'])) {
            $field_value = $field_value->id();
          }
          else if($field_parts[count($field_parts) - 1] == 'value') {            
            // Ckeck if the field is a DateTimeFieldItemList object.
            if ($field_value->get($field_parts[count($field_parts) - 2]) instanceof \Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList) {
              $timestamp = $field_value->get($field_parts[count($field_parts) - 2])->date->getTimestamp();
              $field_value = date('Y-m-d H:i', $timestamp);
            }
            else {
              $field_value = $field_value->get($field_parts[count($field_parts) - 2])->value;
            }
          }
          else {
            $field_value = '';
          }

          // Cast to string.
          $field_value = (string) $field_value;

          $expression = str_replace('{' . $field . '}', $field_value, $expression);
        }
        $title = $expression;
      }
    }
  }

  return $title;
}